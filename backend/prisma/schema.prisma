generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  userId   String?
  role     UserRole

  @@map("Auth")
}

model UserVerification {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  uniqueString String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("UserVerification")
}

model ForgotPassword {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  uniqueString String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("ForgotPassword")
}



model Patient {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  bloodGroup    String?
  mobile        String?
  city          String?
  state         String?
  zipCode       String?
  gender        String?
  country       String?
  email         String         @unique
  address       String?
  img           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  reviews       Review[]
  prescriptions Prescription[]
  favourites    Favourite[]
  Report        Report[]

  @@map("Patient")
}

model Doctor {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName              String
  lastName               String
  fullName               String? 
  email                  String           @unique
  address                String?
  img                    String?
  phone                  String?
  gender                 Gender?
  dob                    String?
  biography              String?
  clinicName             String?
  clinicAddress          String?
  clinicImages           String?
  city                   String?
  state                  String?
  country                String?
  postalCode             String?
  linkedin               String?
  facebook               String?
  instagram              String?
  twitter                String?
  price                  String?
  services               String?
  specialization         String?
  degree                 String?
  college                String?
  completionYear         String?
  experience             String?
  designation            String?
  award                  String?
  awardYear              String?
  registration           String?
  year                   String?
  experienceHospitalName String?
  experienceStart        String?
  experienceEnd          String?
  verified               Boolean?         @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  appointments           Appointment[]
  prescriptions          Prescription[]
  favourites             Favourite[]
  doctorTimeSlots        DoctorTimeSlot[]
  blogs                  Blog[]
  reviews                Review[]
  reports                Report[]

  @@map("Doctor")
}

model InterestedDoctor {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String?
  email     String?
  mobileNumber     String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("InterestedDoctor")
}


model Emergency {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  patientName String
  mobile      String
  subject     String
  city        String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Emergency")
}

model Ambulance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  driverName      String
  mobile          String
  email           String
  city            String
  ambulanceNumber String
  status          Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("Ambulance")
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String
  patient   Patient? @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  reportTitle  String
  uploadUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Report")
}

model Appointment {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  patientId          String?
  patient            Patient?            @relation(fields: [patientId], references: [id])
  doctorId           String?
  doctor             Doctor?             @relation(fields: [doctorId], references: [id])
  trackingId         String?             @unique
  firstName          String?
  lastName           String?
  email              String?
  phone              String?
  address            String?
  description        String?
  scheduleDate       String?
  scheduleTime       String?
  reasonForVisit     String?
  status             String?             @default("pending")
  paymentStatus      PaymentStatus?      @default(unpaid)
  prescriptionStatus PrescriptionStatus? @default(notIssued)
  isFollowUp         Boolean?            @default(false)
  patientType        String?
  medicalHistory     String?             @default("No")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  prescriptions      Prescription[]
  payments           Payment[]

  @@map("Appointment")
}

model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  paymentType   String?
  paymentId     String?
  orderId       String?
  doctorFee     Int
  bookingFee    Int
  gst           Int?
  totalAmount   Int

  @@map("Payment")
}

model Contact {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String?
  subject   String?
  text      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Contact")
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId      String
  doctor        Doctor?  @relation(fields: [doctorId], references: [id])
  patientId     String
  patient       Patient  @relation(fields: [patientId], references: [id])
  description   String?
  star          String?
  isRecommended Boolean?
  response      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("Review")
}

model Prescription {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  followUpdate  String
  instruction   String?
  isFulfilled   Boolean     @default(false)
  isArchived    Boolean     @default(false)
  daignosis     String
  disease       String
  test          String?
  medicines     Medicine[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("Prescription")
}

model Medicine {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicine       String?
  dosage         String?
  frequency      String?
  duration       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("Medicine")
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String  @unique
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  @@map("Favourite")
}

model DoctorTimeSlot {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorId       String
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  day            Day?
  timeSlot       ScheduleDay[]
  weekDay        String?
  maximumPatient Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("DoctorTimeSlot")
}

model ScheduleDay {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  startTime        String
  endTime          String
  doctorTimeSlotId String?
  doctorTimeSlot   DoctorTimeSlot? @relation(fields: [doctorTimeSlotId], references: [id])
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  img         String?
  userId      String
  user        Doctor   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Blog")
}

enum UserRole {
  admin
  patient
  doctor
}

enum Day {
  saturday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
}

enum Gender {
  male
  female
}

enum PrescriptionStatus {
  issued
  notIssued
}

enum PaymentStatus {
  paid
  unpaid
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Admin")
}
